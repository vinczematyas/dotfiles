return {
  {
    'mfussenegger/nvim-dap',
    dependencies = {
      'mfussenegger/nvim-dap-python',
      'rcarriga/nvim-dap-ui',
      'theHamsta/nvim-dap-virtual-text',
      'nvim-neotest/nvim-nio',
      'williamboman/mason.nvim',
    },
    config = function()
      local dap = require 'dap'
      local ui = require 'dapui'

      require('dapui').setup()
      require('dap-python').setup()
      -- if there is a venv then use it

      require('nvim-dap-virtual-text').setup()
      vim.fn.sign_define('DapBreakpoint', { text='ðŸ”´', texthl='DapBreakpoint', linehl='DapBreakpoint', numhl='DapBreakpoint' })

      -- Debugger
      vim.api.nvim_set_keymap('n', '<leader>dt', ':DapUiToggle<CR>', {noremap=true})
      vim.api.nvim_set_keymap('n', '<leader>db', ':DapToggleBreakpoint<CR>', {noremap=true})
      vim.api.nvim_set_keymap('n', '<leader>dc', ':DapContinue<CR>', {noremap=true})
      vim.api.nvim_set_keymap('n', '<leader>dr', ':lua require("dapui").open({reset = true})<CR>', {noremap=true})
      vim.api.nvim_set_keymap('n', '<leader>ht', ':lua require("harpoon.ui").toggle_quick_menu()<CR>', {noremap=true})


      -- Eval var under cursor
      vim.keymap.set('n', '<leader>?', function()
        require('dapui').eval(nil, { enter = true })
      end)

      vim.keymap.set('n', '<leader>dc', dap.continue)
      vim.keymap.set('n', '<leader>dj', dap.step_into)
      vim.keymap.set('n', '<leader>dl', dap.step_over)
      vim.keymap.set('n', '<leader>dk', dap.step_out)
      vim.keymap.set('n', '<leader>dh', dap.step_back)
      vim.keymap.set('n', '<leader>dr', dap.restart)
      -- vim.keymap.set('n', '<leader>de', vim.diagnostic.open_float())

      dap.listeners.before.attach.dapui_config = function()
        ui.open()
      end
      dap.listeners.before.launch.dapui_config = function()
        ui.open()
      end
      dap.listeners.before.event_terminated.dapui_config = function()
        ui.close()
      end
      dap.listeners.before.event_exited.dapui_config = function()
        ui.close()
      end
    end,
  },
}
